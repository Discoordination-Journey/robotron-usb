/* Name: main.c
 * Project: hid-data, example how to use HID for data transfer
 * Author: Christian Starkjohann
 * Creation Date: 2008-04-11
 * Tabsize: 4
 * Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH
 * License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)
 * This Revision: $Id: main.c 777 2010-01-15 18:34:48Z cs $
 */

/*
This example should run on most AVRs with only little changes. No special
hardware resources except INT0 are used. You may have to change usbconfig.h for
different I/O pins for USB. Please note that USB D+ must be the INT0 pin, or
at least be connected to INT0 as well.
*/

#include <stdio.h>
#include <avr/io.h>
#include <avr/wdt.h>
#include <avr/interrupt.h>  /* for sei() */
#include <util/delay.h>     /* for _delay_ms() */
#include <avr/eeprom.h>
#include <avr/pgmspace.h>   /* required by usbdrv.h */
#include "usbdrv.h"
#include "oddebug.h"        /* This is also an example for using debug macros */


#define BAUD 19200 
#define UBRR (((F_CPU / (BAUD * 16UL))) - 1)
#define BV(bit)		(1<<(bit))
#define TXB8 0
#define RXB8 1
#define UCSZ2 2
#define TXEN 3
#define RXEN 4
#define UDRIE 5
#define TXCIE 6
#define RXCIE 7

/* ------------------------------------------------------------------------- */
/* ----------------------------- USB interface ----------------------------- */
/* ------------------------------------------------------------------------- */
/*----------------------------------------------------------*/
/* definition about USB keyboard 		 					*/
/* see : "Device Class Definition for HID v.1.11"			*/ 
/*----------------------------------------------------------*/
/* USB keyboard report descriptor (created by USB.org's tool) */
PROGMEM char usbHidReportDescriptor[64] = {
    0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
    0x09, 0x06,                    // USAGE (Keyboard)
    0xa1, 0x01,                    // COLLECTION (Application)
    0x75, 0x01,                    //   REPORT_SIZE (1)
    0x95, 0x08,                    //   REPORT_COUNT (8)
    0x05, 0x07,                    //   USAGE_PAGE (Keyboard)
    0x19, 0xe0,                    //   USAGE_MINIMUM (Keyboard LeftControl)
    0x29, 0xe7,                    //   USAGE_MAXIMUM (Keyboard Right GUI)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x25, 0x01,                    //   LOGICAL_MAXIMUM (1)
    0x81, 0x02,                    //   INPUT (Data,Var,Abs)
    0x95, 0x01,                    //   REPORT_COUNT (1)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x81, 0x01,                    //   INPUT (Cnst,Ary,Abs)
    0x95, 0x05,                    //   REPORT_COUNT (5)
    0x75, 0x01,                    //   REPORT_SIZE (1)
    0x05, 0x08,                    //   USAGE_PAGE (LEDs)
    0x19, 0x01,                    //   USAGE_MINIMUM (Num Lock)
    0x29, 0x05,                    //   USAGE_MAXIMUM (Kana)
    0x91, 0x02,                    //   OUTPUT (Data,Var,Abs)
    0x95, 0x01,                    //   REPORT_COUNT (1)
    0x75, 0x03,                    //   REPORT_SIZE (3)
    0x91, 0x01,                    //   OUTPUT (Cnst,Ary,Abs)
    0x95, 0x06,                    //   REPORT_COUNT (6)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x26, 0xff, 0x00,              //   LOGICAL_MAXIMUM (255)
    0x05, 0x07,                    //   USAGE_PAGE (Keyboard)
    0x19, 0x00,                    //   USAGE_MINIMUM (Reserved (no event indicated))
    0x29, 0xe7,                    //   USAGE_MAXIMUM (Keyboard Right GUI)
    0x81, 0x00,                    //   INPUT (Data,Ary,Abs)
    0xc0                           // END_COLLECTION
};

/* inornate part start ------------------------------------------------------- */

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static int
uart_putchar(char c, FILE *stream)
{
	if (c == '\n')
		uart_putchar('\r', stream);
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
	return 0;
}

/* USB keyboard report buffer */
static struct REPORT_BUF_STRUCT {
	uchar modKey;
	uchar reserved;
	uchar keys[6];
} reportBuffer;

static uchar idleRate;    		/* in 4 ms units */
static uchar protocolVer = 1;	/*  0 = boot protocol, 1 = report protocol */
static uchar expectReport;		/* flag to indicate if we expect an USB-report */
static uchar keyDidChange;		/* key status was changed */

static void hardwareInit(void) {
	/*
	   PD0..1 -> RX/TX
	   PD2..3 -> D+/D-
	   PD4    -> (NOT USED)
	   PD5    -> USB PULLUP CTRL
	   PD6..7 -> (NOT USED)   */
	PORTD = 0xD3;		/* 1101 0011 : activate pull-ups excepts on USB lines */
	DDRD  = 0x20;		/* 0x10 0000 : all pins input excepts USB reset */

    /* configure timer 0 for a rate of 16M/(256 * 256) = 244.14 Hz (4.096ms) */
    TCCR0 = 4;      /* timer 0 prescaler: 256 */

//	printf("Init!\n");
}


// set to 1 if press, 2 if release, 0 if undefined
static int writeMode = 0;

/**
 * RECV data. RX Complete Interrupt
 */
ISR(USART_RXC_vect)
{
	cli();
    uchar rb = UDR;
	uchar cnt;

//	printf("Get %2x\n", rb);
	if(rb==0xFF) {				// press signal
		writeMode = 1;
	}
	else if(rb == 0x00) { 		// release signal
		writeMode = 2;
	}
	else {
		if(rb == 0xFF) {
			for(cnt=0;cnt<sizeof(reportBuffer.keys);cnt++) {
				reportBuffer.keys[cnt] = 0;
			}
		}
		else if(rb <= 0x03 || rb >= 0xE7) {
		}
		else if(writeMode==1) {		// press!
			for(cnt=0;cnt<sizeof(reportBuffer.keys);cnt++) {
				if(reportBuffer.keys[cnt] == 0) {
					reportBuffer.keys[cnt] = rb;
					keyDidChange=1;
					break;
				}
			}	
		}
		else if(writeMode==2) {
			for(cnt=0;cnt<sizeof(reportBuffer.keys);cnt++) {
				if(reportBuffer.keys[cnt] == rb) {
					reportBuffer.keys[cnt] = 0;
					keyDidChange=1;
					break;
				}
			}	
		}
		writeMode = 0;
	}
	sei();
}

/* inornate part end -------------------------------------------------------- */

/* ------------------------------------------------------------------------- */

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
uchar usbFunctionWrite(uchar *data, uchar len)
{
    if (expectReport && (len == 1)) {
		/*
		if (data[0] & USB_LED_NLOCK) {
			cLED |= SKBD_LED_NLOCK;
		}
		if (data[0] & USB_LED_CLOCK) {
			cLED |= SKBD_LED_CLOCK;
		}
		if (data[0] & USB_LED_SCRLCK) {
			cLED |= SKBD_LED_SCRLCK;
		}
		if (data[0] & USB_LED_CMPOSE) {
			cLED |= SKBD_LED_CMPOSE;
		}
		if (data[0] & USB_LED_KANA) {
			cLED |= SKBD_LED_KANA;
		}
		*/
//		printf("%02x\n", data[0]);
	}
    expectReport = 0;
    return 1;
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	usbRequest_t    *rq = (void *)data;

    usbMsgPtr = (uchar *)&reportBuffer;
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
            /* we only have one report type, so don't look at wValue */
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){ 
            if (rq->wLength.word == 1) {
                /* We expect one byte reports */
                expectReport = 1;
                return USB_NO_MSG; /* Call usbFunctionWrite with data */
            }
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
            usbMsgPtr = &idleRate;
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
            idleRate = rq->wValue.bytes[1];
        } else if (rq->bRequest == USBRQ_HID_GET_PROTOCOL) {
		    if (rq->wValue.bytes[1] < 1) {
                protocolVer = rq->wValue.bytes[1];
            }
        } else if(rq->bRequest == USBRQ_HID_SET_PROTOCOL) {
            usbMsgPtr = &protocolVer;
            return 1;
        }

    }else{
        /* no vendor specific requests implemented */
    }
	return 0;
}

/* ------------------------------------------------------------------------- */

int main(void)
{
	stdout = &mystdout;

	/* FOR USART */
	UBRRH = (UBRR>>8); 
	UBRRL = UBRR; 
	UCSRA = 0x00;                                      // asynchronous normal mode
//	UCSRB = _BV(RXEN) | _BV(TXEN);	
	UCSRB = 0x98;	
	UCSRC = 0x86;                                      // no parity, 1 stop, 8 data

	//    PORTA = ~(1 << PINA0);

	DDRB  = 0xFF;
	//    PORTB = ~(1 << PINB6);
	PORTB = 0x00;

	uchar i=250;

	uchar idleCounter = 0;

	hardwareInit();

    wdt_enable(WDTO_1S);
    /* Even if you don't use the watchdog, turn it off here. On newer devices,
     * the status of the watchdog (on/off, period) is PRESERVED OVER RESET!
     */
    /* RESET status: all port bits are inputs without pull-up.
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */

//    odDebugInit();
//    DBG1(0x00, 0, 0);       /* debug output: main starts */

    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();

	for(cnt=0;cnt<sizeof(reportBuffer.keys);cnt++) {
		reportBuffer.keys[cnt] = 0;
	}
	keyDidChange = 1;

    sei();
    for(;;){                /* main event loop */
        wdt_reset();
        usbPoll();

		if (TIFR & _BV(TOV0)) {		/* 4ms period expired */ 
			TIFR = _BV(TOV0);
			if(idleRate != 0){
				if(idleCounter > 0){
					idleCounter--;
				} else{
					idleCounter = idleRate;
					keyDidChange = 1;
				}
			}
		}

		if(keyDidChange && usbInterruptIsReady()) {
			keyDidChange = 0;
			usbSetInterrupt((uchar *)&reportBuffer, sizeof(reportBuffer));
		}
    }

    return 0;
}

/* ------------------------------------------------------------------------- */
